# ==========================
# 1. 向量模型镜像
# ==========================
FROM ghcr.io/1panel-dev/maxkb-vector-model:v1.0.1 AS vector-model

# ==========================
# 2. 前端构建阶段
# ==========================
FROM registry.cn-qingdao.aliyuncs.com/dataease/sqlbot-base:latest AS frontend-builder
ARG NPM_REGISTRY=https://registry.npmmirror.com
ENV UI_HOME=/opt/sqlbot/frontend
WORKDIR /tmp/frontend

# 先拷贝依赖文件，利用缓存机制
COPY frontend/package*.json ./
RUN npm config set registry ${NPM_REGISTRY} && npm install

# 拷贝完整前端代码并构建
COPY frontend/ ./
RUN npm run build \
    && mkdir -p ${UI_HOME} \
    && mv dist ${UI_HOME}/dist \
    && rm -rf node_modules \
    && npm cache clean --force \
    && rm -rf /tmp/frontend

# ==========================
# 3. SSR 构建阶段
# ==========================
FROM registry.cn-qingdao.aliyuncs.com/dataease/sqlbot-base:latest AS ssr-builder
ARG NPM_REGISTRY=https://registry.npmmirror.com
WORKDIR /app

COPY g2-ssr/package*.json ./
RUN npm config set registry ${NPM_REGISTRY} && npm install

COPY g2-ssr/app.js ./
COPY g2-ssr/charts/* ./charts/
RUN npm cache clean --force

# ==========================
# 4. 后端构建阶段
# ==========================
FROM registry.cn-qingdao.aliyuncs.com/dataease/sqlbot-base:latest AS backend-builder
ARG UV_INDEX_URL=https://mirrors.aliyun.com/pypi/simple/
ARG PIP_INDEX_URL=https://mirrors.aliyun.com/pypi/simple/
ENV SQLBOT_HOME=/opt/sqlbot
ENV APP_HOME=${SQLBOT_HOME}/app
WORKDIR ${APP_HOME}

# 只复制依赖文件，利用缓存
COPY backend/pyproject.toml ./
COPY backend/uv.lock* ./

# 安装 Python 依赖（使用 uv）
RUN --mount=type=cache,target=/root/.cache/uv \
    export UV_INDEX_URL=${UV_INDEX_URL} && \
    export PIP_INDEX_URL=${PIP_INDEX_URL} && \
    export UV_HTTP_TIMEOUT=300 && \
    if [ -f "uv.lock" ]; then uv sync --frozen --no-install-project; else uv sync --no-install-project; fi

# 复制后端完整代码
COPY ./backend ./

# 安装 CPU 版本依赖并清理无用文件
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --extra cpu \
    && rm -rf .mypy_cache .coverage htmlcov app.egg-info scripts README.md \
    && find . -type d -name "__pycache__" -exec rm -rf {} + \
    && find . -name "*.pyc" -delete

# ==========================
# 5. 最终运行环境
# ==========================
FROM registry.cn-qingdao.aliyuncs.com/dataease/sqlbot-base:latest
ENV PYTHONUNBUFFERED=1
ENV SQLBOT_HOME=/opt/sqlbot
ENV PYTHONPATH=${SQLBOT_HOME}/app
ENV PATH="${SQLBOT_HOME}/app/.venv/bin:$PATH"

# 基础依赖
RUN apt-get update && apt-get install -y --no-install-recommends curl \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# 创建目录
RUN mkdir -p ${SQLBOT_HOME}/app ${SQLBOT_HOME}/frontend ${SQLBOT_HOME}/images ${SQLBOT_HOME}/g2-ssr ${SQLBOT_HOME}/models

# 拷贝启动脚本
COPY start.sh ${SQLBOT_HOME}/app/start.sh
RUN chmod +x ${SQLBOT_HOME}/app/start.sh

# 字体文件（SSR用）
COPY g2-ssr/*.ttf /usr/share/fonts/truetype/liberation/

# 拷贝前后端产物
COPY --from=backend-builder ${SQLBOT_HOME} ${SQLBOT_HOME}
COPY --from=frontend-builder ${SQLBOT_HOME}/frontend ${SQLBOT_HOME}/frontend
COPY --from=ssr-builder /app ${SQLBOT_HOME}/g2-ssr
COPY --from=vector-model /opt/maxkb/app/model ${SQLBOT_HOME}/models

WORKDIR ${SQLBOT_HOME}/app

# 暴露端口
EXPOSE 3000 8000 8001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000 || exit 1

# 启动命令
ENTRYPOINT ["sh", "start.sh"]
